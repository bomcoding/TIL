11장 EL(Expression Language) - JSP 2.0부터 추가

EL은 JSTL 1.0 규약에 소개된 내용으로 JSP 2.0부터 JSP에 포함되고, JSP2.3에 대응되는 것은 EL3.0이다.
EL은 값을 표현하는데 사용되며, JSP의 <jsp:useBean>, <jsp:getProperty>를 보완한다.

EL의 기능
- JSP의 4가지 기본객체가 제공하는 영역의 속성사용
- 수치연산, 관계연산, 논리연산자 제공
- 자바 클래스 메서드 호출기능 제공
- 쿠키, 기본 객체의 속성 등 JSP를 위한 표현 언어의 기본 객체 제공
- EL3.0부터는 람다식, 스트림 API, static메서드 실행도 가능

EL을 사용하면 보다 간결한 코드로 값을 표현할 수 있다.

 	<%=member.getAddress().getZipcode()%>
 	$(member.address.zipcode}

EL의 사용예 - <%%>안에는 사용못하고 태그에만 사용가능(액션태그 포함)

 	<jsp:include page="/module/${skin.id}/header.jsp" flush="true"/>
     <em>${sessionScope.member.id}</em>님 환영합니다.

${expr}과 #{expr}의 차이 - 값을 생성하는 시점이 다르다. 앞에 escape문자를 붙이면 \${expr} 그대로 출력됨
JSP2.1부터 #{expr}을 추가로 지원. JSF(Java Server Faces)에서 유래
[범균290]
- Servlet2.3의 web.xml - EL을 지원않음.
- Servlet2.4의 web.xml - #{expr}을 지원않음.
- Servlet2.5+의 web.xml - ${expr}, #{expr} 지원

 	${expr} - 구문이 분석되는 시점에 값이 계산된다.
 	#{expr} - 실제로 값이 사용될 때 값이 계산된다.

#{expr}은 곧바로 값이 생성되는 것이 아니므로 JSP의 템플릿 텍스트에서는 사용할 수 없다.

	#{sessionScope.name.id}님 환영합니다. // 에러 발생

#{expr}은 JSTL의 <c:set>, <c:out>과 같이 defered expression을 허용하는 태그의 속성에만 위치할 수 있다.
#{expr}과 같은 deferred expression은 사실 잘 사용되지 않는다.

   <% m.setName("이름1"); %>
   <c:set var="name" value="${m.name}"/>  <--- 이 시점에 값이 계산된다. <c:set>은 변수에 값을 대입할때 사용
   <% m.setName("이름2"); %>
	${name}  //  이름1

그러나 #{expr}은 값이 사용될 때 값이 계산되므로 위의 코드와 다른 결과를 얻는다.

   <% m.setName("이름1"); %>
   <c:set var="name" value="#{m.name}"/>  <--- 이 시점에 값이 계산되지 않는다.
   <% m.setName("이름2"); %>
	${name}  //  이름2  <--- 이 시점에 값이 계산된다. #{name}이 아님에 주의


EL의 타입과 리터럴 - 각 타입간의 변환은 규칙에 따라 자동으로
1. Boolean타입 : true, false
2. 정수타입(Long)
3. 실수타입(Double)
4. 문자열 타입
5. 널 타입 : null


EL에서 사용할 수 있는 기본 객체 - pageContext를 제외하면 모두 Map객체이다.
pageContext
pageScope
requestScope
sessionScope
applicationScope
param             	- request.getParameter(이름)
paramValues   	- request.getParameterValues(이름)
header           	- request.getHeader(이름)
headerValues  	- request.getHeaders(이름)
cookie            	- request.getCookies()
initPram          	- application.getInitParameter(이름)


[예제:chap11/useELObject.jsp]
요청URI:${pageContext.request.requestURI}<br>
request의 name속성:${requestScope.name}<br>
쿠키 : ${cookie.ID.value}
파라미터 code:${param.code}   <--- 파라미터 code가 존재하지 않으면 아무것도 출력하지 않음.(null 출력 안함)

위의 예제에서 code라는 파라미터 값이 존재하지 않으면, 즉 null인 경우, 출력되지 않는다.
이처럼 EL은 값이 존재하지 않는 경우, 아무것도 출력하지 않는다.

  ${pageScope.NAME}   // pageScope에서 NAME이라는 속성을 찾는다.

영역을 지정하지 않고 속성이름만 적는 경우, 4개의 영역을 차례대로 검색해서 찾는다.

  ${NAME}	// PAGE, REQUEST, SESSION, APPLICATION(좁은 범위에서 넓은 범위로)의 순서로 검사


p.258
1. 수치연산자 - EL에서 제공하는 연산자는 +,-,*,/,%와 부호연산자(-), div와 mod도
${"10"+1}  	// "101"이 아니라 11이 된다. "10"을 Long으로 변환한 뒤에 연산
${"일"+10}	// 에러. "일"을 숫자로 변환할 수 없어서 에러남.(변환이나 연산에 실패하면 예외발생)
${null+1}  	// null이 0으로 변환되어 1을 결과로 얻는다.
${3/2}   	// 나누기에서는 둘다 Double로 변환후 연산. 결과는 1.5

산술연산의 규칙처럼 나름대로의 규칙을 가지고 있다.
1. 둘다 null이면 Long타입의 0을 반환
2. 둘 중의 큰타입으로 변환
 - Long보다 작은 타입은 Long으로 변환
 - 정수와 실수 연산에서 Double로 변환(단, 정수가 BigInteger인 경우는 BigDecimal로 변환.)
3. 수치연산시에 변환이나 연산에 실패하면 예외를 발생시킨다.
2. 비교연산자 - 문자열 비교에는 String.compareTo()가 사용됨
${strValue=='2004'}  //  strValue.compareTo("2004")==0  	홑따옴표와 쌍따옴표의 차이는? 둘다 혼용가능?
==   eq
!=	ne
<	lt
>	gt
<=   le
>=   ge

3. 논리 연산자
&&   and
||	or
!  	not

4. empty연산자 - 빈 객체인지 검사할때 사용.
 - 피연산자가 null이면, true
 - 피연산자가 빈 컬렉션이면, true
 - 피연산자가 빈 배열(빈 문자열도)이면, true
 - 그 외에는 false

5. 삼항 연산자도 사용가능

6. 문자열 연결 - +=
${"문자"+="열"+="연결"}  // "문자열연결"

7. 컬렉션과 객체
- List의 경우
<c:set var="vals" values="${[1,2,3,4,5]}"/>   // ${[1,2,3,4,5]} 는 List(요소의 타입은 Long)
${myfunc:sum(vals)}
${vals[2]} // List의 세번째 요소. 3

- Map의 경우
<c:set var="mem" value="${ {'name':'홍길동', 'age':20} }"/>
${mem.name}	// 홍길동
${mem.age}      // 20

- Set의 경우
<c:set var="hangul" value="${{'가','나','다'}}"
${hangul}

8. 세미콜론 연산자 - C언어의 콤마(,)연산자와 동일
${1+1; 10+10}	// 두번째 식의 결과인 20이 출력됨.


9. 할당 연산자
원래는 아래의 둘 중의 한가지 방법을 사용해야했다.
<% request.setAttribute("var1", 10L);%>
<c:set var="val1" value="${10}"/>

위의 문장들 대신. EL3.0부터 제공되는 할당연산자를 사용하면 아래와 같이 할 수 있다.

${val1 = 10}  	// 변수 val1에 10을 저장하고, val1의 값을 출력

만일 할당 연산후에 변수의 값을 출력하기 원하지 않는다면 아래와 같이 세미콜론 연산자를 사용하면 된다.

${hangul=['가','나','다']; '' }   // hangul에 List를 저장하고, 빈문자열''을 출력한다. 즉 아무것도 출력하지 않는다.
${hangul[0]}      // List의 첫번째 요소만 출력


p.266
EL에서 메서드 호출하기
JSP2.2/EL2.2부터 EL에서 객체의 메서드를 직접호출할 수 있다. 이전 버젼에서는 컴파일 에러
<%
   Thermometer t = new Thermometer();  // 객체를 생성해서
   request.setAttribute("t", t);            	// EL에서 사용할 수 있도록 request영역에 저장.
%>

${t.setCelsius("seoul", 27.3)}   // EL에서 메서드 호출


EL에서 static메서드 호출하기 - p.273
앞서 배운 내용을보면 EL에서 static메서드를 호출하려면
TLD파일 작성, web.xml도 설정. @taglib도 설정해야했는데...

EL3.0부터는 JSP에서 코드만 작성하면 된다.(TLD파일작성, web.xml설졍 필요없음)
<%@ page import="util.FormatUtil"%>
...
가격은 <b>${FormatUtil.number(price, '#,##0')}</b>원 입니다.  // static메서드 호출


EL을 비활성화하기 - p.287
1. web.xml에서 비활성화 옵션 지정하기
2. JSP페이지에서 비활성화 옵션 지정하기
3. web.xml파일을 서블릿2.3 또는 2.4에 맞게 작성하기


12장 JSTL(JSP Standard Tag Library)  - p.292
커스텀 태그를 표준화 한것이 바로 JSTL이다.

1. JSTL이 제공하는 태그의 종류
코어                      c           http://java.sun.com/jsp/jstl/core
XML                  	x           http://java.sun.com/jsp/jstl/xml
형식화                   fmt         http://java.sun.com/jsp/jstl/fmt
DB                        sql        http://java.sun.com/jsp/jstl/sql
문자열,컬렉션         fn          http://java.sun.com/jsp/jstl/functions

JSTL을 사용하려면 JSTL1.2(JSP2.3과 호환)를 구현한 jar파일을 다운로드 해야한다.
다운로드 후, WEB-INF/lib에 복사(mvnrepository.com에서 jstl로 검색. 다운로드 수가 많은 것 선택)


2. 코어 태그 라이브러리
코어 태그 라이브러리를 사용하려면 아래의 한 줄을 포함시켜야한다.(잊고 안넣는 경우가 많다. 꼭 소스보기로 확인)
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

[변수지원] - JSTL태그에서 사용할 변수를 설정하기 위해 사용.
set     	// 변수 선언
remove   // 변수 제거

[흐름제어]
if
choose
forEach      
forTokens	// 구분자로 분리된 각각의 토큰을 처리할 때 사용

[URL처리]
import     	// URL을 사용하여 다른 자원의 결과를 삽입
redirect     
url          	// URL을 재작성

[기타]
catch	// 예외처리
out    	// JspWriter에 출력
-----------------------------------------------------------------------------------------

[변수지원] - JSTL태그에서 사용할 변수를 설정하기 위해 사용.

1. <c:set>은 EL변수의 값이나 EL변수의 속성을 지정할 때 사용
[주의] var와 scope에 <%%>이나 ${}사용 불가

<c:set var="변수이름" value="값" scope="영역"/>   // EL변수를 선언하고 값저장. scope는 생략가능
<c:set var="변수이름" scope="영역">값</c:set>    // 위와 동일

<c:set var="name" value="최범균"/>
<c:set var="name" value="<%=m.getFirstName()%>" scope="request"/>
<c:set var="name" value="${m.lastName} ${m.firstName}"/>
<c:set var="name">${m.lastName} ${m.firstName}</c:set>  // 위의 문장과 동일

객체의 속성값 설정 - /chap08/useObject.jsp로 테스트 할 것. @taglib추가하는 것 잊지말고.
<c:set target="대상" property="속성이름" value="값"/>
<c:set target="대상" property="속성이름">값</c:set>

<c:set target="<%=member%>" property="name" value="최범균"/>  // member는 참조변수
<c:set target="${member}" property="name" value="최범균"/>     	// 위와 동일. target, property에 <%%>, ${} 가능.
<c:set target="member" property="name" value="최범균"/>          	// 에러. 주의!!! 실수하기 쉽다.

<c:set var="m" value="<%=member%>"/> // 참조변수 member의 값을 변수 m에 저장
<c:set target="${m}" property="name" value="최범균"/>  // target="<%=m%>"는 에러. m이 taglib에서 선언한것이라서.
${m.name}

<% Map<String, String> prop = new HashMap<String, String>(); %>
<c:set target="<%=prop%>" property="host" value="localhost"/> // prop.set("host","localhost")와 동일
<%=prop.get("host")%>


2. <c:remove>태그 - <c:set>으로 선언한 변수를 삭제할 때 사용
<c:remove var="변수이름" [scope="영역"]/>  // 영역을 생략하면 모든 영역의 같은이름 변수를 모두 삭제

<c:set var="name" value="최범균" scope="request"/>
<c:set var="name" value="최밤균" scope="session"/>
<c:remove var="name">   // scope이 지정되어 있지 않으므로 모든 scope의 속성을 삭제


3. 흐름제어 태그 - if, choose, forEach, forTokens  
<c:if test = "조건">
...
</c:if>

<c:if test="true">           	// 항상 true.  test속성의 값을 true로 지정
<c:if test="blah blah">  	// 항상 false. true가 아니면 false

<c:if test="${expr}">    	 // ${expr}이 true이면 참, 아니면 거짓. #{expr}은 사용불가
<c:if test="<%=expr%>">  // <%=expr%>이 true이면 참, 아니면 거짓
<c:if test="${param.name=='bk'}">  // 문자열 비교. 매개변수로 넘어온 값을 비교. String의 compareTo("bk")==0과 동일
<c:if test="${param.age > 18 }">     // 숫자 비교

test속성의 값을 별도의 EL변수(var)에 저장할 수 있다.

<c:if test="<%=someCondition%>" var="testResult">  // scope속성으로 변수 testResult를 저장할 영역지정 가능
   ...
</c:if>
테스트 결과:${testResult}


<c:choose>, <c:when>, <c:otherwise>
java의 switch문에 해당. 책에는 if문과 switch문의 혼합이라 하는데. 내가보기엔 if-else if문임.

<c:choose>
	<c:when test="${member.level=='trial'}">	// case문. 일치하는 단 하나의 <c:when>만 실행됨.
   	...
    </c:when>
	<c:when test="${member.level=='regular'}">
  	...
    <c:when>
  	...
    <c:otherwise>   // default문. 모든 <c:when>이 false일 때 실행. 생략가능.
  	...
    </c:otherwise>
</c:choose>

<c:forEach> - 배열과 컬렉션에 저장된 값을 순차적으로 처리
<c:forEach var="변수이름" items="배열 or 컬렉션">  // 기본형 배열은 래퍼 클래스의 배열로 처리됨.
...
   	${변수이름}
     	...
</c:forEach>

// 변수 i의 값을 1부터 10까지 출력
<c:forEach var="i" begin="1" end="10">   // step="1"이 생략됨
 	${i}
</c:forEach>

<c:forEach var="i" begin="1" end="10" step="2">
 	${i}
</c:forEach>

<c:forEach var="i" items="${intArray}" begin="2" end="4">   // 배열 inArray에서 index가 2~4인 동안 반복.
  ${i}                                                                             	// List, Iterator, Enumeration, Map도 가능
</c:forEach>

<c:forEach var="i" items="${map}">   // Map에 저장된 요소에 접근하는 경우
   key=${i.key}, value=${i.value}<br>
</c:forEach>

<c:forEach var="item" items="<%list%>" varStatus="status">   // 반복상태를 저장할 객체이름을 status로 지정. EL불가
 	${status.index+1}번째 항목: ${item.name}
</c:forEach>

varStatus속성은 반복횟수와 같은 정보를 저장할 객체의 이름을 값으로 갖는다.
이 객체가 갖는 속성(제공하는 정보)은 다음과 같다.

index  : 현재 인덱스
count  : 반복횟수
begin 
end
stop
first : 현재 반복이 첫번째인 경우만 true
last : 현재 반복이 마지막인 경우만 true
current : 컬렉션 중에서 현재 반복에서 사용할 객체


<c:forTokens>는 java.util.StringTokenizer와 같은 역할을 하는 태그
<c:forEach>처럼 begin, end, step, varStatus속성을 제공.

<c:forTokens var="token" items="문자열" delims="구분자">
    ${token}
</c:forTokens>

<c:forTokens var="color" items="red,green,blue" delims=",">
   ${color}
</c:forTokens>


4. URL처리 태그
<c:url>     	: URL생성에 사용
<c:redirect>  : redirect할 때 사용

<c:url value="URL" var="변수이름" scope="영역">  // var와 scope은 생략가능
  	<c:param name="이름" value="값"/>	// 지정된 파라미터는 contentType에 지정된 인코딩을 따른다.
</c:url>

<c:url value="http://search.daum.net/search" var="searchUrl">
  	<c:param name="w" value="blog"/>
  	<c:param name="q" value="공원"/>
</c:url>
${searchUrl}   // http://search.daum.net/search?w=blog&q=%ea%b3%b5%ec%9b%90

<c:url value="/use_if_tag.jsp"/> 	// /chap12/use_if_tag.jsp	/로 시작하면 앞에 contextpath가 붙는다.
<c:url value="./use_if_tag.jsp"/>	// ./use_if_tag.jsp            	.로 시작하면 그대로 출력된다.


<c:redirect>는 response.sendRedirect()처럼 지정한 페이지로 redirect한다.
<c:redirect>이후의 코드는 실행되지 않는다는 점에 주의하자.

<c:redirect url="URL" context="context경로">   // context는 생략가능
  	<c:param name="이름" value="값"/>
</c:redirect>

<c:redirect url="/use_c_set.jsp"/>   //  '/'로 시작하는 경로에는 contextpath가 앞에 붙는다. /chap12/use_c_set.jsp
<c:redirect utl="/use_c_set.jsp" context="/chap15"/>   // 경로는 /chap15/use_c_set.jsp가 된다.

<c:redirect url="http://search.daum.net/search">
 	<c:param name="w" value="blog"/>
 	<c:param name="q" value="aaaa"/>
</c:redirect>


5. 기타 코어 태그
<c:out>는 응답데이터를 출력할때 사용된다.
응답(response)에 value에 지정된 데이터를 출력

<c:out value="value" escapeXml="true 또는 false" default="기본값">  // escapeXml과 default속성은 생략가능
<c:out value="value" escapeXml="true 또는 false">기본값</c:out>

default: value속성에 값이 없을 때 사용될 값
escapeXml :  <, >, &, ', "과 같은 문자들을 &lt;와 같은 식으로 변환할지의 여부(true이면 변환)

<%
 	reader = new FileReader(getServletContext().getRealPath(path));
%>

<c:out value="<%=reader%>" escapeXml="true"/>	// 지정된 파일의 내용을 페이지에 출력


<c:catch>태그 - 발생한 예외를 EL변수에 저장할 때 사용
<c:catch var="exName">   // exName은 예외객체의 이름
   ...
 	예외가 발생할 수 있는 코드
   ...
</c:catch>
...
${exName}   // 예외 객체를 출력한다.

[예제/chap12/use_catch_tag.jsp]
<c:catch var="ex">
	name파리미터의 값=<%=request.getParameter("name")%><BR>
	<% if(request.getParameter("name").equals("test")) { %>
    	${param.name}은 test입니다.
	<% } %>
</c:catch>
<p>
<c:if test="${ex!=null}">
예외가 발생하였습니다.
${ex}
</c:if>